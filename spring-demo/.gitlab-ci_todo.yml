default:
  image:
    name: docker:24-git
    entrypoint: ["/bin/ash", "-c"]

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build
  - deploy

.rules_app_changes:
  rules:
    - changes:
        - .gitlab/**/*
        - src/**/*
        - .gitlab-ci.yml
        - Dockerfile
        - build.gradle
        - settings.gradle

build:
  stage: build
  script:
    - echo make
  rules:
    - !reference [.rules_app_changes, rules]

deploy-development:
  stage: deploy
  script:
    - echo deploying $CI_COMMIT_SHORT_SHA to development
    # - |
    #   set -ex
    #   apk add --no-cache --update jq yq
    #   wget https://storage.googleapis.com/kubernetes-release/release/v1.27.1/bin/linux/amd64/kubectl
    #   chmod +x ./kubectl
    #   mv ./kubectl /usr/local/bin
    #   git config --global http.sslVerify false
    #   git config user.name "Deploy Example Bot"
    #   git config user.email "test@example.com"
    #   git fetch origin $DEPLOYMENT_BRANCH
    #   git checkout $DEPLOYMENT_BRANCH
    #   echo "update manifests"
    #   git add $MANIFEST_DIR
    #   git commit -m "Create development deploy $CI_COMMIT_REF_NAME"
    #   git push http://anything:$DEPLOYMENT_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$DEPLOYMENT_BRANCH
  resource_group: development
  environment:
    name: development
  variables:
    DEPLOYMENT_BRANCH: _gitlab/agents/development
    MANIFEST_DIR: deploy/manifests/development
  rules:
    - if: '$CI_COMMIT_BRANCH != /development/'
      when: never
    - !reference [.rules_app_changes, rules]

deploy-staging:
  stage: deploy
  #tags:
  #    - staging-protected-runner
  script:
    - echo deploying $CI_COMMIT_SHORT_SHA to staging
  resource_group: staging
  environment:
    name: staging
  variables:
    DEPLOYMENT_BRANCH: _gitlab/agents/staging
    MANIFEST_DIR: deploy/manifests/staging
  rules:
    - if: '$CI_COMMIT_TAG =~ /STAGING/i'
      # changes:
      #   - deploy/manifests/staging/*
    - if: '$CI_COMMIT_BRANCH != /staging/'
      when: never

deploy-production:
  stage: deploy
  #tags:
  #    - production-protected-runner
  script:
    - echo optional check version is in staging
    - echo deploying $CI_COMMIT_SHORT_SHA to production
    # - |
    #   git config --global http.sslVerify false
    #   git config user.name "Deploy Example Bot"
    #   git config user.email "test@example.com"
    #   git fetch origin $DEPLOYMENT_BRANCH
    #   git checkout $DEPLOYMENT_BRANCH
    #   git merge $CI_COMMIT_SHA --ff-only
    #   echo "update manifests"
    #   git add $MANIFEST_DIR
    #   git commit -m "Create production deploy $CI_COMMIT_REF_NAME"
    #   git push http://anything:$DEPLOYMENT_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$DEPLOYMENT_BRANCH
  resource_group: production
  environment:
    name: production
  variables:
    DEPLOYMENT_BRANCH: _gitlab/agents/production
    MANIFEST_DIR: deploy/manifests/production
  rules:
    - if: '$CI_COMMIT_TAG =~ /PRODUCTION/i'
    #   changes:
    #     - deploy/manifests/production/*
    - if: '$CI_COMMIT_BRANCH != /main/'
      when: never