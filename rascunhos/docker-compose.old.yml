networks:
  gitlab:
    name: gitlab
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
          gateway: 172.31.0.1

services:
  nginx:
    container_name: nginx
    image: nginx:stable
    networks:
      - gitlab
    ports:
      - 80:80
      #- 443:443
    environment:
      - TZ=America/Sao_Paulo
      - update=1
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        cat <<'EOF'> /etc/nginx/conf.d/default.conf
        server_tokens off;
        resolver 127.0.0.11 valid=10s;
        server {
          server_name _;
          listen 80 default_server;
          # if ($$scheme = http) {
          #   return 301 https://$$host$$request_uri;
          # }
          # listen 443 ssl default_server;
          # ssl_certificate /etc/ssl/example_ca/example.pem;
          # ssl_certificate_key /etc/ssl/example_ca/example.key;
          # ssl_protocols TLSv1.2 TLSv1.3;
          # ssl_ciphers HIGH:!aNULL:!MD5;
          client_max_body_size 0;
          chunked_transfer_encoding on;
          location / {
            set $$backend gitlab:80;
            proxy_set_header Host $$host;
            proxy_set_header X-Real-IP $$remote_addr;
            proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $$scheme;
            proxy_set_header Upgrade $$http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_pass http://$$backend$$request_uri;
            proxy_redirect off;
          }
        }
        EOF
        exec nginx -g 'daemon off;'
    depends_on:
      gitlab:
        condition: service_started

  gitlab:
    container_name: gitlab
    build:
      dockerfile: Dockerfile
      context: .
    networks:
      - gitlab
    ports:
      - "2222:22"
    extra_hosts:
      - "gitlab.example.com:172.31.0.1"
      - "registry.example.com:172.31.0.1"
    deploy:
      resources:
        limits:
          memory: 5120M
        reservations:
          memory: 5120M
    healthcheck:
      start_period: 4m
      test: 'curl -fsSL -H "Gitlab-Bypass-Rate-Limiting: 1" -H "host: gitlab.example.com" http://127.0.0.1/-/health'
    volumes:
      - $PWD/gitlab/data:/var/opt/gitlab
      - $PWD/gitlab/logs:/var/log/gitlab
      - $PWD/gitlab/config:/etc/gitlab
    shm_size: 256m
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        gitlab_rails['initial_root_password'] = 'kai0Eihipie3Iek7'
        external_url 'http://gitlab.example.com'
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        letsencrypt['enable'] = false
        nginx['listen_port'] = 80
        nginx['listen_https'] = false
        nginx['redirect_http_to_https'] = false
        mattermost_nginx['redirect_http_to_https'] = false
        # gitlab_rails['gitlab_default_projects_features_container_registry'] = false
        registry_external_url 'http://registry.example.com'
        registry_nginx['listen_port'] = 80
        registry_nginx['listen_https'] = false
        registry_nginx['redirect_http_to_https'] = false
        # https://docs.gitlab.com/omnibus/settings/memory_constrained_envs.html
        puma['worker_processes'] = 0
        sidekiq['max_concurrency'] = 10
        prometheus_monitoring['enable'] = false
        gitlab_rails['env'] = {
          'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000',
          'GITLAB_THROTTLE_BYPASS_HEADER' => 'Gitlab-Bypass-Rate-Limiting'
        }
        # gitaly['cgroups_repositories_count'] = 2
        # gitaly['cgroups_mountpoint'] = '/sys/fs/cgroup'
        # gitaly['cgroups_hierarchy_root'] = 'gitaly'
        # gitaly['cgroups_memory_bytes'] = 500000
        # gitaly['cgroups_cpu_shares'] = 512
        gitaly['concurrency'] = [
          {
            'rpc' => "/gitaly.SmartHTTPService/PostReceivePack",
            'max_per_repo' => 3
          }, {
            'rpc' => "/gitaly.SSHService/SSHUploadPack",
            'max_per_repo' => 3
          }
        ]
        gitaly['env'] = {
          'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000',
          'GITALY_COMMAND_SPAWN_MAX_PARALLEL' => '2'
        }
      TZ: America/Sao_Paulo

  docker:
    image: docker:24-dind
    container_name: dind
    privileged: true
    networks:
      - gitlab
    extra_hosts:
      - "gitlab.example.com:172.31.0.1"
      - "registry.example.com:172.31.0.1"
    ports:
      - "6443:6443"
    environment:
      - DOCKER_TLS_CERTDIR=/certs
    command:
      - --storage-driver=overlay2
      - --insecure-registry=http://registry.example.com
    volumes:
      - dind_data:/var/lib/docker
      - /certs

  bastion:
    image: docker:24-cli
    container_name: bastion
    hostname: bastion
    networks:
      - gitlab
    extra_hosts:
      - "gitlab.example.com:172.31.0.1"
      - "registry.example.com:172.31.0.1"
    environment:
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1
    volumes_from:
      - docker
    entrypoint:
      - sh
      - -c
      - |
        set -ex
        test "$$(uname -m) = x86_64" && wget https://kind.sigs.k8s.io/dl/v0.19.0/kind-linux-amd64 -O /usr/local/bin/kind
        chmod +x /usr/local/bin/kind
        test "$$(uname -m) = x86_64" && wget https://storage.googleapis.com/kubernetes-release/release/v1.27.1/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl
        test "$$(uname -m) = x86_64" && wget -O- https://get.helm.sh/helm-v3.8.1-linux-amd64.tar.gz | tar zxvf - -C "/usr/local/bin" linux-amd64/helm --strip-components 1
        chmod +x /usr/local/bin/kubectl
        cat <<'EOF'> ~/.zshrc
        autoload -Uz compinit
        compinit
        export TERM="xterm-256color"
        source /usr/share/zsh/plugins/powerlevel10k/powerlevel9k.zsh-theme
        source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
        source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
        source <(kubectl completion zsh)
        source <(helm completion zsh)
        alias k=kubectl
        compdef k=kubectl
        ZSH_THEME="powerlevel9k/powerlevel9k"
        POWERLEVEL9K_PROMPT_ON_NEWLINE=true
        POWERLEVEL9K_CONTEXT_TEMPLATE="%m"
        POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator context dir vcs)
        POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
        HISTSIZE=10000
        SAVEHIST=10000
        HISTFILE=~/.zsh_history
        setopt EXTENDED_HISTORY
        setopt HIST_EXPIRE_DUPS_FIRST
        setopt HIST_IGNORE_DUPS
        setopt HIST_IGNORE_ALL_DUPS
        setopt HIST_IGNORE_SPACE
        setopt HIST_FIND_NO_DUPS
        setopt HIST_SAVE_NO_DUPS
        setopt HIST_BEEP
        EOF
        apk add --no-cache --update \
          zsh alpine-zsh-config zsh-theme-powerlevel10k \
          zsh-syntax-highlighting zsh-autosuggestions \
          vim curl git jq yq k9s skopeo
        api_server=$$(ping -w 3 -q -c 1 docker | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]*")
        cat <<EOF> ~/kind-config.yaml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        networking:
          # sed 's/0.0.0.0/127.0.0.1/g' -i ~/.kube/config
          apiServerAddress: "0.0.0.0"
          apiServerPort: 6443
          ipFamily: ipv4
          dnsSearch: []
        nodes:
        - role: control-plane
          extraPortMappings:
          - containerPort: 80
            hostPort: 80
            protocol: TCP
          - containerPort: 443
            hostPort: 443
            protocol: TCP
          kubeadmConfigPatches:
          - |
            kind: InitConfiguration
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "ingress-ready=true"
          - |
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                authorization-mode: "Node,RBAC"
              certSANs:
              - "127.0.0.1"
              - "172.31.0.1"
              - "$$api_server"
              - "docker"
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:32000"]
            endpoint = ["http://localhost:32000"]
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.example.com"]
            endpoint = ["http://registry.example.com"]
        EOF
        mkdir -p ~/.kube
        kind delete cluster || true
        kind create cluster --image kindest/node:v1.27.1 --config ~/kind-config.yaml
        sed "s/0.0.0.0/172.31.0.1/g" -i ~/.kube/config
        kubectl cluster-info
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        exec sleep infinity
    working_dir: /root
    stop_signal: KILL

  runner-1:
    image: gitlab/gitlab-runner:alpine
    container_name: runner-1
    hostname: runner-1
    networks:
      - gitlab
    extra_hosts:
      - "gitlab.example.com:172.31.0.1"
      - "registry.example.com:172.31.0.1"
    entrypoint:
      - sh
      - -c
      - |
        set -ex
        #exec sleep infinity
        while ! curl -fsSL -k http://gitlab.example.com/-/readiness?token=$$READINESS_TOKEN; do sleep 1; done
        gitlab-runner unregister --all-runners
        gitlab-runner register --non-interactive --locked=false --name=runner-1 \
          --executor=docker \
          --docker-image=docker:24-cli \
          --docker-network-mode=host \
          --docker-volumes="/certs:/certs" \
          --env="DOCKER_HOST=tcp://docker:2376" \
          --env="DOCKER_CERT_PATH=/certs/client" \
          --env="DOCKER_TLS_VERIFY=1" \
          --template-config=/runner-template.toml \
          --run-untagged="true" \
          --access-level="not_protected" \
          --docker-extra-hosts="gitlab.example.com:172.31.0.1" \
          --docker-extra-hosts="registry.example.com:172.31.0.1"
        exec gitlab-runner run --user=gitlab-runner --working-directory=/home/gitlab-runner
    volumes:
      - $PWD/runner-template.toml:/runner-template.toml
    environment:
      - DOCKER_HOST=tcp://docker:2376
      - DOCKER_CERT_PATH=/certs/client
      - DOCKER_TLS_VERIFY=1
      - CI_SERVER_URL=http://gitlab.example.com/
      - REGISTRATION_TOKEN=NeCrUqPRvcFpCjV5xP8L
      - READINESS_TOKEN=iZ7cjgWtZ4-hoT9TbauX
      - update=2
    volumes_from:
      - docker

  s3-minio:
    container_name: s3-minio
    image: minio/minio
    networks:
      - gitlab
    ports:
      - 9089:9089
    entrypoint: ""
    command:
      - sh
      - -c
      - |
        exec minio server --quiet /data --console-address :9089
    environment:
      - TZ=America/Sao_Paulo
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=test@123
    volumes:
      - minio_data:/data
    healthcheck:
      interval: 5s
      test: curl -fsSL http://127.0.0.1:9000/minio/health/ready

  s3-bucket:
    container_name: s3-bucket
    image: minio/mc
    networks:
      - gitlab
    environment:
      - TZ=America/Sao_Paulo
    entrypoint:
      - sh
      - -c
      - |
        set -e
        /usr/bin/mc config host add minio http://minio:9000 root test@123
        /usr/bin/mc mb -p minio/runner
        exit 0
    restart: "no"
    depends_on:
      s3-minio:
        condition: service_healthy

volumes:
  dind_data:
    name: dind_data
  minio_data:
    name: minio_data