default:
  image:
    name: docker:24-git
    entrypoint: ["/bin/ash", "-c"]

stages:
  - build
  - deploy

workflow:
  rules:
    - if: $CI_COMMIT_TAG =~ '/^v\d+\.\d+\.\d+$/' || $CI_COMMIT_BRANCH == 'develop'
      exists:
        - Dockerfile

build:
  stage: build
  rules:
    - changes:
      - src/**/*
      - .gitlab-ci.yml
      - Dockerfile
      - build.gradle
      - settings.gradle
  before_script:
    - docker version
    - docker info
  script:
    - env
    - VERSION=$(grep ^version build.gradle | grep -Eo "[0-9]+\.[0-9]+\.[0-9]*")
    - IMAGE_TAG="${CI_COMMIT_TAG:-v$VERSION}"
    - |
      docker context create tls-environment
      echo "$CI_REGISTRY_PASSWORD" | docker login http://$CI_REGISTRY -u "$CI_REGISTRY_USER" --password-stdin
      docker buildx create --name image-builder --use tls-environment --driver docker-container --driver-opt network=host
    - |
      docker buildx build --platform=linux/amd64,linux/arm64/v8 \
        --tag "$CI_REGISTRY_IMAGE:$IMAGE_TAG" \
        --tag "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" \
        --output=type=registry,registry.insecure=true --push --progress=plain . --sbom=false --provenance=false
    - |
      apk add --no-cache --update jq skopeo
    - |
      skopeo inspect --tls-verify=false docker://$CI_REGISTRY_IMAGE:$IMAGE_TAG --raw | jq .
    - |
      skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA \
        docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-amd64 \
        --src-tls-verify=false \
        --dest-tls-verify=false \
        --override-arch=amd64
    - |
      skopeo copy docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA \
        docker://$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA-arm64 \
        --src-tls-verify=false \
        --dest-tls-verify=false \
        --override-arch=arm64
    - |
      echo "IMAGE_TAG=$IMAGE_TAG" > build.env
      echo "VERSION=$VERSION" >> build.env
  artifacts:
    reports:
      dotenv: build.env

.deploy:
  needs:
    - job: build
      artifacts: true
  script:
    - env
    - |
      wget -O- https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.5.7/kustomize_v4.5.7_linux_amd64.tar.gz | \
        tar zxvf - -C "/usr/local/bin"
    - git config --global http.sslVerify false
    - git config --global user.email "gitlab-ci@example.com"
    - git config --global user.name "Deploy Bot"
    - |
      echo "Pull Deployment Repository"
      git clone $DEPLOYMENT_REPOSITORY
      cd $CI_PROJECT_NAME
    - |
      echo "Update Kustomize Manifests"
      if [[ $DEPLOYMENT_BRANCH == "dev" ]]; then
        git checkout $DEPLOYMENT_BRANCH --
        git pull
        sh -c "sed \"s|value:.*|value: $CI_REGISTRY_IMAGE:$IMAGE_TAG|g\" -i $MANIFEST_DIR/container-ImageRegistryUri.yaml"
        kustomize build $MANIFEST_DIR
        git add $MANIFEST_DIR
        git commit -m "$CI_ENVIRONMENT_NAME v$VERSION $CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
        git push --set-upstream origin $DEPLOYMENT_BRANCH
      else
        git checkout $DEPLOYMENT_BRANCH --
        git pull
        MERGE_BRANCH=$CI_ENVIRONMENT_NAME-$IMAGE_TAG
        git checkout -b $MERGE_BRANCH
        sh -c "sed \"s|value:.*|value: $CI_REGISTRY_IMAGE:$IMAGE_TAG|g\" -i $MANIFEST_DIR/container-ImageRegistryUri.yaml"
        kustomize build $MANIFEST_DIR
        git add $MANIFEST_DIR
        git commit -m "$CI_ENVIRONMENT_NAME v$VERSION $CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
        git push --set-upstream origin $MERGE_BRANCH -o merge_request.create -o merge_request.target=$DEPLOYMENT_BRANCH
      fi

deploy-dev:
  stage: deploy
  extends: .deploy
  resource_group: $CI_PROJECT_NAME
  environment:
    name: DEV
  variables:
    GIT_STRATEGY: none
    DEPLOYMENT_REPOSITORY: http://anything:$DEPLOYMENT_TOKEN@gitlab.example.com/gitops-manifests/$CI_PROJECT_NAME.git
    DEPLOYMENT_BRANCH: dev
    MANIFEST_DIR: dev
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop' && $CI_COMMIT_REF_PROTECTED == 'true' && $DEPLOYMENT_TOKEN
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == 'true' && $DEPLOYMENT_TOKEN

deploy-hml:
  stage: deploy
  extends: .deploy
  resource_group: $CI_PROJECT_NAME
  environment:
    name: HML
  variables:
    GIT_STRATEGY: none
    DEPLOYMENT_REPOSITORY: http://anything:$DEPLOYMENT_TOKEN@gitlab.example.com/gitops-manifests/$CI_PROJECT_NAME.git
    DEPLOYMENT_BRANCH: hml
    MANIFEST_DIR: hml
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == 'true' && $DEPLOYMENT_TOKEN
  # when: manual

deploy-prod:
  stage: deploy
  extends: .deploy
  resource_group: $CI_PROJECT_NAME
  environment:
    name: PROD
  variables:
    GIT_STRATEGY: none
    DEPLOYMENT_REPOSITORY: http://anything:$DEPLOYMENT_TOKEN@gitlab.example.com/gitops-manifests/$CI_PROJECT_NAME.git
    DEPLOYMENT_BRANCH: main
    MANIFEST_DIR: prod
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == 'true' && $DEPLOYMENT_TOKEN
  # when: manual